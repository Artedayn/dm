import { TRequestResultError } from '@/api/ApiClass';

//-------------------------------------------------------
// Общие типы для vuex-модулей
//-------------------------------------------------------
/** Состояние апи-запроса. */
export interface IVuexModuleEntityRequest {
  /**
   * type - тип апи-запроса, где:
   ** none    - начальное состояние, запросов еще не было,
   ** get     - получение данных с сервера,
   ** search  - поиск по параметрам,
   ** create  - добавление нового элемента (экземпляра сущности),
   ** save    - сохранение внесенных изменений,
   ** delete  - пометка элемента удаленным.
   * @remark для удобства отдельно выделяется тип ``delete``,
   * хотя технически запись лишь обновляется и возвращается все та же запись,
   * но с флагом ``удалено``.
   */
  type: 'none' | 'get' | 'search' | 'create' | 'save' | 'delete';
  /**
   * state - текущее состояние запроса, где:
   ** start   - запущен (в процессе),
   ** done    - успешно выполнен,
   ** fail    - произошла какая-то ошибка..
   */
  state: 'start' | 'done' | 'fail';
  /**
   * Детали ошибки апи-запроса при ``state: fail``.
   * @remark в то время, как ``data`` естественно является самостоятельным блоком
   * во vuex-модуле, это поле ошибки является частью интерфейса ``запроса``,
   * т.к. носит вспомогательный характер для каких-либо дополнительных обработок,
   * уведомлений пользователю, ведь главное - это данные.
   */
  error: TRequestResultError | null;
}

/**
 * Интерфейс параметров обновления состояния апи-запроса.
 * Выделены возможные сочетания по кейсам:
 ** начало запроса      - фиксируем тип и сбрасываем ошибку,
 ** успешное выполнение - просто фиксируем статус,
 ** ошибка выполнения   - фиксируем ошибку, которую вернул апи-сервис.
 */
export type TVuexModuleEntitySetRequestPayload =
  | {
      state: 'start';
      type: Exclude<IVuexModuleEntityRequest['type'], 'none'>;
      error: null;
    }
  | {
      state: 'done';
    }
  | {
      state: 'fail';
      error: TRequestResultError;
    };

/**
 * Интерфейс блока vuex-модуля, отражающий списковые данные сущности, как например:
 ** полный перечень,
 ** точная выборка id,
 ** поиск по параметрам и т.п.
 */
export interface IVuexModuleEntityList<T> {
  /** Состояние последнего/активного апи-запроса списка */
  request: IVuexModuleEntityRequest;

  /** Массив данных (результат запроса) */
  data: T[];
}

/**
 * Интерфейс блока vuex-модуля, отражающий данные экземпляра сущности.
 */
export interface IVuexModuleEntityItem<T> {
  /** Состояние последнего/активного апи-запроса экземпляра */
  request: IVuexModuleEntityRequest;

  /** Данные экземляра сущности, если есть */
  data: T | null;

  /** Изменения, внесенные на форме редактирования экземпляра */
  changes: Partial<T>;
}
